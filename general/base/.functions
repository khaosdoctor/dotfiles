#!/bin/zsh
#CUSTOM FUNCTIONS
gc() {
    local provider
    local repo=""
    local canAppend=false
    IFS="/"
    dirSplit=($(pwd))
    for part in $dirSplit; do
        if [[ "$part" =~ ^[A-Za-z0-9]+\.[A-Za-z]{1,4}$ ]]; then
            provider=$part
            canAppend=true
            continue
        fi
        if [ $canAppend = true ]; then
            repo=$repo$part/
            continue
        fi
    done
    local reponame=${2:-$1}
    echo "https://$provider/$repo$1.git" "$reponame"
    /usr/bin/git clone "https://$provider/$repo$1.git" "$reponame"
}

git_goto() {
    find . -name .git -type d -execdir git checkout "$1" ";"
}

mkcd() {
    mkdir -p "$1" && cd "$1" || return
}

whichport() {
    sudo lsof -i -n -P | grep :$1
}

# requires yazi, allows to return to the last yazi folder when exiting
function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd" || return
    fi
    rm -f -- "$tmp"
}

if [[ "$(uname -s)" == "Linux" ]]; then
    function create-tui-desktop() {
        APP=$1
        TERMINAL=${2:-rio}
        SRC_PATH=$(find /usr/share/applications ~/.local/share/applications -name "${APP}.desktop" | head -n1)

        if [ -z "$SRC_PATH" ]; then
            echo "❌ .desktop file for ${APP} not found!"
            exit 1
        fi

        DEST_PATH="$HOME/.local/share/applications/${APP}.desktop"
        echo "Copying and creating override for ${APP} in ${DEST_PATH}"
        cp "$SRC_PATH" "$DEST_PATH"

        sed -i "s|^Exec=.*|Exec=${TERMINAL} -e ${APP}|" "$DEST_PATH"
        sed -i "s|^Terminal=.*|Terminal=false|" "$DEST_PATH"
        update-desktop-database ~/.local/share/applications
    }
fi


function systemLog() {
    local input

    if [ ! -t 0 ]; then
        input=$(cat)
    else
        input=$1
    fi

    # on mac log to console
    if [[ "$(uname -o)" == "Darwin" ]]; then
        if [ -x "$(command -v logger)" ]; then
            logger -t "${2:-'UserLogger'}" "[UserTerminalLogger] $input" &
        else
            echo "[${2:-"INFO"}] $input" >>/var/log/user_terminal.log
        fi
    # Linux with systemd log to journal
    elif [[ "$(uname -s)" == "Linux" ]]; then
        if [ -x "$(command -v systemd-cat)" ]; then
            command -v systemd-cat && (echo "$1" | systemd-cat -t "${2:-"info"}") &
        else
            echo "[${2:-"INFO"}] $input" >>/var/log/user_terminal.log
        fi
    # default to log to file
    else
        echo "[${2:-"INFO"}] $input" >>/var/log/user_terminal.log
    fi
}

if [ -x "$(command -v brew)" ]; then
    brew() {
        "$HOMEBREW_PREFIX/bin/brew" "$@"
        local command=$1
        if [ "$command" = "install" ] || [ "$command" = "uninstall" ]; then
            echo "Detected $command command, updating Brewfile... Don't forget to commit the changes!"
            shift
            systemLog "Updating brewfile after $command command with options: $*"
            "$HOMEBREW_PREFIX/bin/brew" bundle dump -f -a --no-upgrade --file=- >"$HOME/Brewfile"
        fi
    }
fi
