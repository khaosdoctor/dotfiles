return {}
----[[
----NOTE: This file is only here to allow us to accept copilot completions using tab over enter
----the line 44 is where the magic happens
----however, to do this, we need to re-enable the whole thing since the opt table is a function
----so lazy will not be able to merge the options and will just overwrite them
----]]
--return {
--  -- NOTE: We also need to re-enable the copilot suggestions for it to work properly
--  {
--    "zbirenbaum/copilot.lua",
--    cmd = "Copilot",
--    build = ":Copilot auth",
--    opts = {
--      suggestion = { enabled = false },
--      panel = { enabled = false },
--      filetypes = {
--        markdown = true,
--        javascript = true,
--        typescript = true,
--        lua = true,
--        json = true,
--        yaml = true,
--        go = true,
--        sh = true,
--        rust = true,
--        help = true,
--        vim = true,
--        python = true,
--        ruby = true,
--        php = true,
--        java = true,
--        c = true,
--        cpp = true,
--      },
--    },
--  },
--  -- NOTE: Enable copilot completions
--  {
--    "zbirenbaum/copilot-cmp",
--    dependencies = "copilot.lua",
--    opts = {},
--    config = function(_, opts)
--      local copilot_cmp = require("copilot_cmp")
--      copilot_cmp.setup(opts)
--      -- attach cmp source whenever copilot attaches
--      -- fixes lazy-loading issues with the copilot cmp source
--      LazyVim.lsp.on_attach(function(client)
--        copilot_cmp._on_insert_enter({})
--      end, "copilot")
--    end,
--  },
--  -- auto completion in general
--  {
--    "hrsh7th/nvim-cmp",
--    version = false, -- last release is way too old
--    event = "InsertEnter",
--    dependencies = {
--      "https://github.com/L3MON4D3/LuaSnip.git",
--      "hrsh7th/cmp-nvim-lsp",
--      "zbirenbaum/copilot-cmp",
--      "hrsh7th/cmp-buffer",
--      "hrsh7th/cmp-path",
--      "saadparwaiz1/cmp_luasnip",
--    },
--    -- Not all LSP servers add brackets when completing a function.
--    -- To better deal with this, LazyVim adds a custom option to cmp,
--    -- that you can configure. For example:
--    --
--    -- ```lua
--    -- opts = {
--    --   auto_brackets = { "python" }
--    -- }
--    -- ```
--    opts = function()
--      vim.api.nvim_set_hl(0, "CmpGhostText", { link = "Comment", default = true })
--      local cmp = require("cmp")
--      local defaults = require("cmp.config.default")()
--      local auto_select = true
--      return {
--        auto_brackets = {}, -- configure any filetype to auto add brackets
--        completion = {
--          completeopt = "menu,menuone,noinsert" .. (auto_select and "" or ",noselect"),
--        },
--        preselect = auto_select and cmp.PreselectMode.Item or cmp.PreselectMode.None,
--        mapping = cmp.mapping.preset.insert({
--          ["<C-b>"] = cmp.mapping.scroll_docs(-4),
--          ["<C-f>"] = cmp.mapping.scroll_docs(4),
--          ["<C-Space>"] = cmp.mapping.complete(),
--          -- NOTE: I have absolutely no fucking clue why visible() is negated here but otherwise it won't work
--          ["<Tab>"] = not cmp.visible() and LazyVim.cmp.confirm({ select = auto_select }) or function(fallback)
--            fallback()
--          end,
--          ["<C-y>"] = LazyVim.cmp.confirm({ select = true }),
--          ["<S-CR>"] = LazyVim.cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
--          ["<C-CR>"] = function(fallback)
--            cmp.abort()
--            fallback()
--          end,
--        }),
--        sources = cmp.config.sources({
--          -- NOTE: Since we're overwriting the entire opts table, we need to set the copilot completions again
--          -- https://www.lazyvim.org/extras/coding/copilot
--          { name = "copilot", group_index = 1, priority = 100 },
--          { name = "nvim_lsp" },
--          { name = "path" },
--        }, {
--          { name = "buffer" },
--        }),
--        formatting = {
--          format = function(entry, item)
--            local icons = LazyVim.config.icons.kinds
--            if icons[item.kind] then
--              item.kind = icons[item.kind] .. item.kind
--            end
--
--            local widths = {
--              abbr = vim.g.cmp_widths and vim.g.cmp_widths.abbr or 40,
--              menu = vim.g.cmp_widths and vim.g.cmp_widths.menu or 30,
--            }
--
--            for key, width in pairs(widths) do
--              if item[key] and vim.fn.strdisplaywidth(item[key]) > width then
--                item[key] = vim.fn.strcharpart(item[key], 0, width - 1) .. "â€¦"
--              end
--            end
--
--            return item
--          end,
--        },
--        experimental = {
--          ghost_text = {
--            hl_group = "CmpGhostText",
--          },
--        },
--        sorting = defaults.sorting,
--      }
--    end,
--  },
--}
